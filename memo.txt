================================================================================
会議休憩管理システム (Meeting Rest System) - プロジェクト整理メモ
================================================================================
最終更新: 2025-10-18

================================================================================
1. プロジェクト概要
================================================================================

【目的】
Google Meet会議中に参加者の疲労度を検知し、適切なタイミングで全メンバーに
休憩を促すリアルタイムシステム

【主要機能】
✓ リーダーが参加者の瞬き数を検知して疲労度を判定
✓ Server-Sent Events (SSE)で全メンバーに休憩通知を配信
✓ ブラウザ内オーバーレイUIで強制的に休憩を促す
✓ Electronデスクトップオーバーレイ（全画面）
✓ Socket.IOによるリアルタイム通信（Electronオーバーレイ用）

【技術スタック】
- フロントエンド: Chrome Extension (Manifest V3), Vanilla JavaScript
- バックエンド: FastAPI (Python)
- データベース: Redis (KVS + Pub/Sub)
- リアルタイム通信: SSE (Server-Sent Events), Socket.IO
- デスクトップアプリ: Electron
- コンテナ: Docker & Docker Compose

================================================================================
2. システム構成
================================================================================

【アーキテクチャ】

  [Leader Extension]
         ↓ (瞬き検知 → 疲労度判定)
         ↓ POST /api/meetings/{id}/rest
  [FastAPI Server]
         ↓ (Redis Pub/Sub)
         ├→ [SSE] → [Member Extension (Browser)] → ブラウザ内オーバーレイ
         └→ [Socket.IO] → [Electron Overlay] → デスクトップ全画面オーバーレイ
         ↓
    [Redis KVS]

【コンポーネント一覧】

1. Leader拡張機能 (extensions/leader/)
   - ビデオキャプチャ機能
   - 瞬き検知（TODO: MediaPipe統合予定）
   - 疲労度判定
   - 休憩トリガーAPI呼び出し
   - **NEW**: SSE接続で休憩通知を受信可能に（2025-10-18追加）

2. Member拡張機能 (extensions/member/)
   - SSE接続クライアント
   - ブラウザ内休憩オーバーレイUI表示
   - ページ情報の定期送信（5秒ごと）
   - Native Messaging経由でElectronに接続情報送信

3. FastAPIサーバー (server/)
   - REST API（計測開始/終了、休憩トリガー、状態確認）
   - SSEエンドポイント（リアルタイム配信）
   - Socket.IOサーバー（Electronオーバーレイ用）
   - Redis Pub/Sub管理

4. Electronオーバーレイ (overlay/)
   - デスクトップ全画面オーバーレイUI
   - Socket.IO接続
   - TCPサーバー（Native Messaging Host受信）
   - ページ情報リアルタイム表示

5. Native Messaging Host (overlay/native-host.js)
   - Chrome拡張機能とElectron間のブリッジ
   - TCPクライアント（localhost:9876）

================================================================================
3. ディレクトリ構造
================================================================================

os_2521/
│
├── extensions/                  # Chrome拡張機能
│   ├── leader/                 # リーダー用拡張機能
│   │   ├── manifest.json       # バージョン: 0.5.0（休憩通知対応）
│   │   ├── content.js          # ビデオキャプチャ + SSE接続 + 休憩UI
│   │   ├── popup.html          # ポップアップUI（ビデオ + 休憩設定）
│   │   └── popup.js            # ポップアップロジック
│   │
│   ├── member/                 # メンバー用拡張機能
│   │   ├── manifest.json
│   │   ├── content.js          # SSE接続 + ブラウザ内UI + ページ情報送信
│   │   ├── background.js       # Native Messaging管理
│   │   ├── popup.html
│   │   ├── popup.js
│   │   └── config.js           # API URL設定
│   │
│   └── README.md
│
├── overlay/                     # Electronオーバーレイアプリ
│   ├── main.js                 # メインプロセス（TCPサーバー + Socket.IO）
│   ├── preload.js              # プリロードスクリプト
│   ├── overlay.html            # オーバーレイUI
│   ├── renderer.js             # レンダラープロセス
│   ├── native-host.js          # Native Messaging Hostブリッジ
│   ├── README.md
│   └── SETUP.md
│
├── server/                      # FastAPIサーバー
│   ├── main.py                 # メインアプリケーション
│   ├── requirements.txt        # Python依存関係
│   ├── Dockerfile
│   └── README.md
│
├── scripts/                     # ビルドスクリプト
│   ├── build-config.js         # 設定ファイル生成
│   └── install-native-host.js  # Native Hostインストールツール
│
├── test/                        # テストツール
│   ├── index.html              # テストコンソール（手動操作用）
│   ├── mock-server.html
│   └── README.md
│
├── doc/                         # ドキュメント
│   ├── README.md
│   ├── spec/
│   │   ├── requirement.md      # 要件定義
│   │   ├── design.md           # 設計ドキュメント
│   │   └── tasks.md            # タスク管理
│   └── infra/
│       └── deploy.md           # デプロイガイド
│
├── docker-compose.yml           # Docker設定
├── package.json                 # Node.js依存関係
├── package-lock.json
├── README.md                    # プロジェクトREADME
└── memo.txt                     # このファイル

================================================================================
4. API設計
================================================================================

【REST API】
POST   /api/meetings/{meeting_id}/start       # 計測開始
DELETE /api/meetings/{meeting_id}/end         # 計測終了
POST   /api/meetings/{meeting_id}/rest        # 休憩トリガー
POST   /api/meetings/{meeting_id}/page-info   # ページ情報受信（NEW）
GET    /api/meetings/{meeting_id}/status      # 状態確認
GET    /health                                 # ヘルスチェック

【SSE (Server-Sent Events)】
GET    /api/sse/events?meeting_id={id}        # イベントストリーム接続

イベント種類:
- connected: SSE接続確立
- message: 一般メッセージ（rest_required含む）
- heartbeat: 定期的なハートビート

【Socket.IO】
イベント種類:
- connect: 接続確立
- disconnect: 切断
- join_meeting: 会議ルームに参加
- leave_meeting: 会議ルームから退出
- page_info: ページ情報配信（サーバー→クライアント）
- rest_required: 休憩通知配信（サーバー→クライアント）

================================================================================
5. データ設計（Redis）
================================================================================

【キー構造】

meetings:{meeting_id}:active              # "true" | "false" (会議がアクティブか)
meetings:{meeting_id}:rest_flg            # "true" | "false" (休憩中か)
meetings:{meeting_id}:started_at          # ISO8601形式のタイムスタンプ
meetings:{meeting_id}:rest_started_at     # 休憩開始時刻

【Pub/Sub】

チャンネル: meeting:{meeting_id}:events
メッセージ形式: JSON
例: {"event": "rest_required", "meeting_id": "abc-defg-hij", "timestamp": "..."}

【TTL設定】
- 各キーは自動的に有効期限を設定可能
- 会議終了時に手動削除

================================================================================
6. 主要フロー
================================================================================

【休憩通知フロー】

1. Leader拡張: 瞬き数を検知（5分間監視）
2. Leader拡張: 疲労度判定（しきい値超過）
3. Leader拡張: POST /api/meetings/{id}/rest
4. FastAPI: rest_flg=true を Redis に保存
5. FastAPI: Redis Pub/Sub で rest_required イベント配信
6. FastAPI: SSE経由で全Member拡張に通知
7. Member拡張: ブラウザ内オーバーレイUI表示
8. FastAPI: Socket.IO経由でElectronオーバーレイに通知
9. Electron: デスクトップ全画面オーバーレイUI表示
10. ユーザー: OKボタンをクリック
11. UI: フェードアウトして非表示

【ページ情報送信フロー（NEW）】

1. Member拡張: 5秒ごとに POST /api/meetings/{id}/page-info
   送信内容: { title, url, timestamp }
2. FastAPI: Socket.IO経由でElectronオーバーレイに配信
3. Electron: ページ情報を画面右上にリアルタイム表示

================================================================================
7. 最近の実装内容（2025-10-18）
================================================================================

【Leader拡張機能への休憩通知機能追加】

変更ファイル:
- extensions/leader/content.js
  → SSE接続機能を追加（Member拡張と同様）
  → rest_requiredイベント受信時に休憩オーバーレイ表示
  → ページ情報の定期送信機能（5秒ごと）
  → 自動再接続機能（5秒後）

- extensions/leader/manifest.json
  → バージョン: 0.4.0 → 0.5.0
  → storage パーミッション追加
  → 説明文に「休憩通知システム対応」を追加

- extensions/leader/popup.html
  → 既存のビデオキャプチャUIを維持
  → 休憩通知システムのUIセクションを追加
    - API URL入力欄
    - Meeting ID入力欄（URLから自動取得）
    - 接続状態インジケーター
    - 接続/切断ボタン

- extensions/leader/popup.js
  → 既存のビデオキャプチャ機能を維持
  → 休憩通知システムの接続ロジック追加
  → Meeting IDの自動抽出機能
  → 設定の保存・復元機能（chrome.storage.local）

【実装内容】
✓ LeaderもMemberと同様にrest flagがtrueになったら休憩画面が表示される
✓ SSE接続による リアルタイム休憩通知受信
✓ 全画面オーバーレイUI表示（Member拡張と同じデザイン）
✓ 自動再接続機能（接続が切れた場合5秒後に再試行）
✓ 設定の永続化（API URL、Meeting IDをストレージに保存）
✓ Google Meet URLからMeeting IDを自動抽出

================================================================================
8. セットアップ手順
================================================================================

【1. サーバー起動】

# Docker Composeでサーバーを起動
cd C:\Users\kouse\JPHACK\os_2521
docker-compose up -d

# ログ確認
docker-compose logs -f

# ヘルスチェック
curl http://localhost:8000/health

【2. Chrome拡張機能インストール】

◆ Leader拡張機能
1. chrome://extensions/ を開く
2. 「デベロッパーモード」を有効化
3. 「パッケージ化されていない拡張機能を読み込む」
4. extensions/leader フォルダを選択

◆ Member拡張機能
1. chrome://extensions/ を開く
2. 「デベロッパーモード」を有効化
3. 「パッケージ化されていない拡張機能を読み込む」
4. extensions/member フォルダを選択

【3. Electronオーバーレイ（オプション）】

# 依存関係インストール
npm install

# 環境変数設定（オプション）
set MEETING_ID=abc-defg-hij
set API_BASE_URL=http://localhost:8000

# Electronオーバーレイ起動
npm run start:overlay

# Native Messaging Hostインストール（初回のみ）
npm run install:native-host

【4. テストコンソール】

test/index.html をブラウザで開く
- API URLを設定
- Meeting IDを入力
- 計測開始 → 休憩トリガー → 計測終了 のテストが可能

================================================================================
9. 使い方
================================================================================

【リーダー側】

1. Google Meetに参加
2. Leader拡張機能アイコンをクリック
3. ビデオキャプチャセクション:
   - 「Start」ボタンで計測開始
   - 参加者のビデオがサムネイル表示される
4. 休憩通知システムセクション:
   - API URLを確認（デフォルト: http://localhost:8000）
   - Meeting IDが自動取得される
   - 「接続開始」ボタンをクリック
5. 疲労度検知または手動で休憩トリガー
6. Leaderにも休憩オーバーレイUIが表示される（NEW）
7. 会議終了時は「Stop」ボタンをクリック

【メンバー側】

1. Google Meetに参加
2. Member拡張機能アイコンをクリック
3. API URLを設定（デフォルト: http://localhost:8000）
4. Meeting IDを入力（URLから自動取得）
5. 「接続開始」ボタンをクリック
6. SSE接続が確立される
7. Leaderから休憩通知が来ると:
   - ブラウザ内に全画面オーバーレイが表示される
   - 「OK」ボタンをクリックして休憩開始
8. Electronオーバーレイを起動している場合:
   - デスクトップ全画面にもオーバーレイが表示される
   - ページ情報が右上にリアルタイム表示される

================================================================================
10. 開発状況
================================================================================

【完了済み】
✓ FastAPIサーバー基本実装
✓ Redis接続とPub/Sub
✓ SSEエンドポイント実装
✓ Socket.IOサーバー実装
✓ Leader拡張機能（ビデオキャプチャ + SSE接続 + 休憩通知受信）
✓ Member拡張機能（SSE接続 + ブラウザ内UI + ページ情報送信）
✓ Electronオーバーレイ（デスクトップ全画面UI + Socket.IO接続）
✓ Native Messaging Host（Chrome拡張 ⇔ Electronブリッジ）
✓ テストコンソール

【TODO / 今後の拡張】
□ MediaPipe Face Meshによる高精度瞬き検知
□ 疲労度の自動判定アルゴリズム改善
□ 個人別疲労度ダッシュボード
□ Slack/Discord通知連携
□ 会議品質レポート機能
□ 認証・セキュリティ強化
□ Kubernetes/Cloud Run デプロイ
□ Native Messagingの暗号化通信

================================================================================
11. トラブルシューティング
================================================================================

【サーバーが起動しない】
- docker-compose logs api redis でログ確認
- docker-compose restart で再起動
- Redisポート（6379）が使用中でないか確認

【SSE接続が確立されない】
- http://localhost:8000/health でサーバー状態確認
- ブラウザコンソールでエラー確認
- CORS設定を確認（現在は全て許可）

【Electronオーバーレイが起動しない】
- npm install で依存関係を再インストール
- TCPポート9876が使用中でないか確認
- Native Messaging Hostが正しくインストールされているか確認

【拡張機能が動作しない】
- chrome://extensions/ で拡張機能が有効化されているか確認
- 拡張機能を再読み込み
- ブラウザコンソールとバックグラウンドページのログを確認

================================================================================
12. 依存関係
================================================================================

【Node.js】
- electron: ^28.0.0
- socket.io-client: ^4.6.1

【Python (server/requirements.txt)】
- fastapi
- uvicorn
- redis
- sse-starlette
- python-socketio

【Docker】
- redis:7-alpine
- Python 3.11+

================================================================================
13. 環境変数
================================================================================

【サーバー側（docker-compose.yml）】
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=(オプション)
API_KEY=(セキュリティ強化時に使用)
ALLOWED_EXTENSION_IDS=(セキュリティ強化時に使用)

【Electronオーバーレイ】
MEETING_ID=(オプション: デフォルトMeeting ID)
API_BASE_URL=(オプション: デフォルトAPI URL)

================================================================================
14. ライセンス
================================================================================

MIT License

================================================================================
15. メモ・備考
================================================================================

【設計上の工夫】
- シンプルで使いやすいUI/UX
- リアルタイム通信の安定性（SSE + Socket.IO）
- Chrome拡張機能とサーバーのスムーズな連携
- Electronオーバーレイによるデスクトップ全画面表示

【ハッカソンでのポイント】
- MVP（最小限の機能）に絞った実装
- 実際に動くプロトタイプを優先
- 拡張可能なアーキテクチャ設計

【今後の改善点】
- 瞬き検知の精度向上（現在は手動トリガー）
- 複数会議の同時管理対応
- より詳細なエラーハンドリング
- セキュリティの強化（認証、暗号化）
- パフォーマンス最適化

================================================================================
最終更新: 2025-10-18
作成者: JPHACKS 2025 チーム
================================================================================
